import Mathlib.Tactic
import ExteriorPowers.ExteriorPower
--import Grassmannian.SeparatingMaps
import ExteriorPowers.ContinuousAlternatingMap


open Classical

namespace ExteriorPower

variable {ùïú E : Type*} [NontriviallyNormedField ùïú] [NormedAddCommGroup E] [NormedSpace ùïú E] {r : ‚Ñï}

def seminormAlternatingForm (f : AlternatingMap ùïú E ùïú (Fin r)) : Seminorm ùïú (ExteriorPower ùïú E r).carrier := by
  set p : Seminorm ùïú ùïú :=
    {toFun := fun x => ‚Äñx‚Äñ
     map_zero' := norm_zero
     add_le' := fun _ _ => norm_add_le _ _
     neg' := fun _ => norm_neg _
     smul' := fun _ _ => norm_smul _ _}
  exact Seminorm.comp p (liftAlternating r f) (ùïú := ùïú) (ùïú‚ÇÇ := ùïú) (œÉ‚ÇÅ‚ÇÇ := RingHom.id ùïú) (E‚ÇÇ := ùïú) (E := (ExteriorPower ùïú E r).carrier)

lemma seminormAlternatingForm_apply_ŒπMulti (f : AlternatingMap ùïú E ùïú (Fin r)) (y : Fin r ‚Üí E) :
seminormAlternatingForm f (ExteriorPower.ŒπMulti ùïú r y) = ‚Äñf y‚Äñ := by
  unfold seminormAlternatingForm
  simp only [Seminorm.comp_apply]
  erw [liftAlternating_apply_ŒπMulti]
  rfl

lemma seminormAlternatingFormBounded (x : ExteriorPower ùïú E r) : ‚àÉ (M : ‚Ñù),
‚àÄ (f : ContinuousAlternatingMap ùïú E ùïú (Fin r)), ‚Äñf‚Äñ = 1 ‚Üí (seminormAlternatingForm f.toAlternatingMap x) ‚â§ M := by
  have hx : x ‚àà (‚ä§ : Submodule ùïú (ExteriorPower ùïú E r)) := by simp only [Submodule.mem_top]
  rw [‚ÜêExteriorPower.ŒπMulti_span] at hx
  apply Submodule.span_induction hx (p := fun x => ‚àÉ (M : ‚Ñù), ‚àÄ (f : ContinuousAlternatingMap ùïú E ùïú (Fin r)),
    ‚Äñf‚Äñ = 1 ‚Üí (seminormAlternatingForm f.toAlternatingMap x) ‚â§ M)
  . intro x hx
    rw [Set.mem_range] at hx
    obtain ‚ü®y, hyx‚ü© := hx
    existsi Finset.prod Finset.univ (fun (i : Fin r) => ‚Äñy i‚Äñ)
    intro f hf
    rw [‚Üêhyx, seminormAlternatingForm_apply_ŒπMulti]
    refine le_trans (ContinuousMultilinearMap.le_op_norm f.toContinuousMultilinearMap y) ?_
    change ‚Äñf‚Äñ * _ ‚â§ _
    rw [hf, one_mul]
  . existsi 0
    intro f _
    simp only [map_zero, le_refl]
  . intro x y hx hy
    obtain ‚ü®Mx, hx‚ü© := hx
    obtain ‚ü®My, hy‚ü© := hy
    existsi Mx + My
    intro f hf
    exact le_trans ((seminormAlternatingForm f.toAlternatingMap).add_le' x y) (add_le_add (hx f hf) (hy f hf))
  . intro a x hx
    obtain ‚ü®M, hx‚ü© := hx
    existsi ‚Äña‚Äñ * |M|
    intro f hf
    change AddGroupSeminorm.toFun (seminormAlternatingForm f.toAlternatingMap).toAddGroupSeminorm (a ‚Ä¢ x) ‚â§ _
    rw [Seminorm.smul']
    refine mul_le_mul (le_refl _) (le_trans (hx f hf) (le_abs_self M)) ?_ (norm_nonneg _)
    simp only [AddGroupSeminorm.toFun_eq_coe, map_nonneg]
