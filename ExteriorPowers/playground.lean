import Mathlib.Tactic
import Mathlib.Analysis.NormedSpace.Multilinear
import Mathlib.Order.Extension.Well

namespace MultilinearMap

variable {R : Type uR} [Semiring R]  {Œπ : Type uŒπ} {M : Œπ ‚Üí Type v} {N : Type w}
[‚àÄ (i : Œπ), AddCommGroup (M i)] [AddCommGroup N] [‚àÄ (i : Œπ), Module R (M i)]
[Module R N] {n : ‚Ñï}

lemma apply_sub [LinearOrder Œπ]
(f : MultilinearMap R M N) (a b v : (i : Œπ) ‚Üí (M i)) (s : Finset Œπ)
(hs : Finset.card s = n) :
f (s.piecewise a v) - f (s.piecewise b v) = Finset.sum Finset.univ (fun (i : Fin n) =>
f (fun j => if h : j ‚àà s then (if (s.orderIsoOfFin hs).symm ‚ü®j, h‚ü© < i then a j
else if (s.orderIsoOfFin hs).symm ‚ü®j, h‚ü© = i then a j - b j else b j) else v j)) := by sorry

end MultilinearMap

namespace ContinuousMultilinearMap



variable {ùïú : Type u_1} [NontriviallyNormedField ùïú] {Œπ : Type v} [Fintype Œπ]
{E : Œπ ‚Üí Type w‚ÇÅ} {F : Type w‚ÇÇ}
[(i : Œπ) ‚Üí NormedAddCommGroup (E i)] [NormedAddCommGroup F] [(i : Œπ) ‚Üí NormedSpace ùïú (E i)]
[NormedSpace ùïú F] [DecidableEq Œπ]


noncomputable def deriv (f : ContinuousMultilinearMap ùïú E F)
(x : (i : Œπ) ‚Üí E i) : ((i : Œπ) ‚Üí E i) ‚ÜíL[ùïú] F :=
Finset.sum Finset.univ (fun (i : Œπ) => (f.toContinuousLinearMap x i).comp (ContinuousLinearMap.proj i))

lemma sub_piecewise_bound (f : ContinuousMultilinearMap ùïú E F) (x : (i : Œπ) ‚Üí E i)
(h : (((i : Œπ) ‚Üí (E i)) √ó ((i : Œπ) ‚Üí E i)))
{s : Finset Œπ} (hs : 2 ‚â§ s.card) :
‚Äñf (s.piecewise h.1 x) - f (s.piecewise h.2 x)‚Äñ ‚â§ s.card ‚Ä¢ (‚Äñf‚Äñ *
‚Äñx‚Äñ ^ s·∂ú.card * ‚Äñh‚Äñ ^ (s.card - 1) * ‚Äñh.1 - h.2‚Äñ) := by
  letI : LinearOrder Œπ := WellFounded.wellOrderExtension emptyWf.wf
  set n := s.card
  convert (congr_arg norm (MultilinearMap.apply_sub f.toMultilinearMap h.1 h.2 x s rfl)).trans_le _
  refine le_trans (norm_sum_le _ _) ?_
  have heq : (Finset.univ (Œ± := Fin n)).card = n := by simp only [Finset.card_fin]
  rw [‚Üêheq, ‚Üê(Finset.sum_const (Œ± := Fin n))]
  apply Finset.sum_le_sum
  intro i _
  refine le_trans (ContinuousMultilinearMap.le_op_norm f _) ?_
  rw [mul_assoc, mul_assoc]
  refine mul_le_mul_of_nonneg_left ?_ (norm_nonneg _)
  rw [‚Üê(Finset.prod_compl_mul_prod s)]
  set m := s.orderIsoOfFin rfl i
  rw [‚Üê(Finset.mul_prod_erase s _ m.2)]
  simp only [m.2, dite_true]
  conv => lhs
          congr
          rfl
          congr
          rw [OrderIso.symm_apply_apply]
          simp only [lt_irrefl i, ite_false, ite_true]
          rfl
  have hle1aux : ‚àÄ (j : Œπ), j ‚àà s·∂ú ‚Üí
    (fun k => ‚Äñif hk : k ‚àà s then
          if (OrderIso.symm (Finset.orderIsoOfFin s rfl)) ‚ü®k, hk‚ü© < i then h.1 k
          else
            if (OrderIso.symm (Finset.orderIsoOfFin s rfl)) ‚ü®k, hk‚ü© = i then h.1 k - h.2 k
            else h.2 k
        else x k‚Äñ) j ‚â§ ‚Äñx‚Äñ := by
    intro j hj
    rw [Finset.mem_compl] at hj
    simp only [hj, dite_false]
    apply norm_le_pi_norm
  have hle1 := Finset.prod_le_prod (s := s·∂ú) (fun j _ => norm_nonneg _) hle1aux
  rw [Finset.prod_const] at hle1
  have hle2aux : ‚àÄ (j : Œπ), j ‚àà Finset.erase s m ‚Üí
    (fun k =>  ‚Äñif hk : k ‚àà s then
    if (OrderIso.symm (Finset.orderIsoOfFin s rfl)) ‚ü®k, hk‚ü© < i then h.1 k
    else
    if (OrderIso.symm (Finset.orderIsoOfFin s rfl)) ‚ü®k, hk‚ü© = i then h.1 k - h.2 k
    else h.2 k
    else x k‚Äñ) j ‚â§ ‚Äñh‚Äñ := by
    intro j hj
    set hj' := Finset.mem_of_mem_erase hj
    simp only [hj', dite_true]
    by_cases hj'' : (s.orderIsoOfFin rfl).symm ‚ü®j, hj'‚ü© < i
    . simp only [hj'', ite_true]
      refine le_trans ?_ (norm_fst_le h)
      apply norm_le_pi_norm
    . simp only [hj'', ite_false]
      have hj''' : (s.orderIsoOfFin rfl).symm ‚ü®j, hj'‚ü© ‚â† i := by
        by_contra habs
        rw [Finset.mem_erase] at hj
        simp only at hj
        rw [‚Üêhabs] at hj
        simp only [OrderIso.apply_symm_apply, ne_eq, not_true_eq_false, false_and] at hj
      simp only [hj''', ite_false, ge_iff_le]
      refine le_trans ?_ (norm_snd_le h)
      apply norm_le_pi_norm
  have hle2 := Finset.prod_le_prod (s := s.erase m) (fun j _ => norm_nonneg _) hle2aux
  rw [Finset.prod_const, Finset.card_erase_of_mem m.2] at hle2
  refine le_trans (mul_le_mul_of_nonneg_right hle1 (mul_nonneg (norm_nonneg _)
    (Finset.prod_nonneg (fun _ _ => norm_nonneg _)))) ?_
  apply mul_le_mul
  . apply le_refl (‚Äñx‚Äñ ^ s·∂ú.card)
  /- Error message:
  tactic 'apply' failed, failed to unify
  ‚Äñx‚Äñ ^ Finset.card s·∂ú ‚â§ ‚Äñx‚Äñ ^ Finset.card s·∂ú
with
  ‚Äñx‚Äñ ^ Finset.card s·∂ú ‚â§ ‚Äñx‚Äñ ^ Finset.card s·∂ú-/

end ContinuousMultilinearMap
